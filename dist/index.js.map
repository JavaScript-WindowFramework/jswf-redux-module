{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { useMemo } from \"react\";\r\n\r\n//パラメータをオプション化\r\ntype AddOptionType<T> = {\r\n  [M in keyof T]+?: T[M];\r\n};\r\ntype map = { [key: string]: unknown };\r\n\r\n/**\r\n *Callback用アクション定義\r\n *\r\n * @interface Action\r\n */\r\ninterface Action {\r\n  type: string;\r\n  payload: {\r\n    callback: (state: map) => map;\r\n  };\r\n}\r\n//アクションタイプ名\r\nconst ActionName = \"@CALLBACK\";\r\n\r\n/**\r\n *Storeデータ設定用\r\n *\r\n * @export\r\n * @template T\r\n * @param {(action: Action) => void} dispatch\r\n * @param {(string | string[])} name Storeのオブジェクト名(階層指定可能)\r\n * @param {AddOptionType<T>} params パラメータ\r\n */\r\nexport function setStoreState<T = map>(\r\n  dispatch: (action: Action) => void,\r\n  name: string | string[],\r\n  params: AddOptionType<T>\r\n) {\r\n  function callback(state: map) {\r\n    if (name instanceof Array) {\r\n      const length = name.length;\r\n      const newState = { ...state };\r\n      let tempState = newState;\r\n      let i;\r\n      for (i = 0; i < length - 1; i++) {\r\n        const n = name[i];\r\n        if (typeof tempState[n] !== \"object\") {\r\n          const obj = {};\r\n          tempState[name[i]] = obj;\r\n          tempState = obj;\r\n        } else tempState = tempState[n] as map;\r\n      }\r\n      tempState[name[i]] = { ...tempState[name[i]], ...params };\r\n      return newState;\r\n    } else {\r\n      const newState = { ...state };\r\n      newState[name] = { ...newState[name], ...params };\r\n      return newState;\r\n    }\r\n  }\r\n\r\n  dispatch({\r\n    type: ActionName,\r\n    payload: {\r\n      callback\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n *Reduxにモジュール機能を組み込む\r\n *\r\n * @export\r\n * @param {*} [state={}]\r\n * @param {Action} action\r\n * @returns\r\n */\r\nexport function ModuleReducer(state = {}, action: Action) {\r\n  if (action.type === ActionName)\r\n    return action.payload.callback(state as never);\r\n  return state;\r\n}\r\n\r\n/**\r\n *ストアデータ操作用基本モジュールクラス\r\n *\r\n * @export\r\n * @class ReduxModule\r\n * @template State\r\n */\r\nexport class ReduxModule<State = { [key: string]: unknown }> {\r\n  protected static defaultState?: unknown;\r\n  private dispatch: Dispatch<any>;\r\n  private store: unknown;\r\n  private moduleName: string;\r\n  public constructor(dispatch: Dispatch<any>, store: unknown, moduleName: string) {\r\n    this.dispatch = dispatch;\r\n    this.moduleName = moduleName;\r\n    if (store !== undefined) {\r\n      this.store = store;\r\n    } else {\r\n      //初期値設定\r\n      const defaultState = (this.constructor as Function & {\r\n        defaultState: State;\r\n      }).defaultState;\r\n      if (defaultState) {\r\n        const state = this.getState();\r\n        if (state === undefined) this.setState(defaultState);\r\n      }\r\n    }\r\n  }\r\n  public getDispatch() {\r\n    return this.dispatch;\r\n  }\r\n\r\n  /**\r\n   *モジュールのStoreデータを返す\r\n   *\r\n   * @template T\r\n   * @returns {(T | undefined)}\r\n   * @memberof StoreModule\r\n   */\r\n  public getState<T = State>(): T | undefined;\r\n  public getState<T = unknown>(name?: string | string[]): T | undefined {\r\n    //パラメータ処理\r\n    let names = [];\r\n    if (typeof name === \"string\") names.push(name);\r\n    else if (name instanceof Array) names.push(...name);\r\n    let store: map = this.store as map;\r\n    //初期値が無かった場合に仮設定\r\n    if (store === undefined) {\r\n      const defaultState = (this.constructor as Function & {\r\n        defaultState: State;\r\n      }).defaultState;\r\n      if (defaultState) {\r\n        store = defaultState as never;\r\n      }\r\n    }\r\n    if (name === undefined) return (store as never) as T;\r\n    //対象のデータを検索\r\n    const length = names.length;\r\n    let i;\r\n    for (i = 0; i < length - 1; i++) {\r\n      if (store[names[i]] === undefined) return undefined;\r\n      store = store[names[i]] as map;\r\n    }\r\n    return store[names[i]] as T;\r\n  }\r\n\r\n  /**\r\n   *モジュールのStoreデータの設定\r\n   *\r\n   * @template T\r\n   * @param {(string | string[])} name\r\n   * @param {AddOptionType<T>} params\r\n   * @memberof StoreModule\r\n   */\r\n  public setState<T = State>(\r\n    name: string | string[],\r\n    params: AddOptionType<T>\r\n  ): void;\r\n  public setState<T = { [key: string]: unknown }>(\r\n    params: AddOptionType<T>\r\n  ): void;\r\n  public setState<T = { [key: string]: unknown }>(\r\n    a: unknown,\r\n    b?: unknown\r\n  ): void {\r\n    if (b === undefined) {\r\n      this._setState<T>([], a as never);\r\n    } else {\r\n      this._setState<T>(a as never, b as never);\r\n    }\r\n  }\r\n  private _setState<T = { [key: string]: unknown }>(\r\n    name: string | string[],\r\n    params: AddOptionType<T>\r\n  ) {\r\n    const storeName = this.moduleName;\r\n    const names = [storeName];\r\n    if (typeof name === \"string\") names.push(name);\r\n    else if (name instanceof Array) names.push(...name);\r\n    setStoreState(this.dispatch, names, params);\r\n  }\r\n}\r\n\r\n//クラス識別用マップ\r\nconst modules = new Map<Function,number>();\r\n/**\r\n *Redux操作用モジュールの生成\r\n *\r\n * @export\r\n * @template T\r\n * @param  module StoreModule継承クラス\r\n * @param {string} [prefix] Storeデータ分離用装飾文字列\r\n * @returns {T}\r\n */\r\nexport function useModule<T extends ReduxModule>(\r\n  module: {\r\n    new (dispatch: Dispatch<any>, store: unknown, prefix: string): T;\r\n  },\r\n  prefix?: string\r\n): T {\r\n  let count = modules.get(module);\r\n  if(count === undefined){\r\n    count = modules.size;\r\n    modules.set(module,count);\r\n  }\r\n  const moduleName = \"@Module-\"+(prefix || \"\")+\"-\"+count;\r\n  const dispatch = useDispatch();\r\n  const store = useSelector(\r\n    store => (store as map)[moduleName]\r\n  ) as map | undefined;\r\n  return useMemo(() => {\r\n    return new module(dispatch, store, moduleName);\r\n  }, [store]);\r\n}\r\n"]}